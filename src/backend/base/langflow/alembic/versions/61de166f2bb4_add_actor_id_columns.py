"""add actor_id columns

Revision ID: 61de166f2bb4
Revises: 76d66c690b3f
Create Date: 2025-03-12 08:22:10.463766

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.engine.reflection import Inspector
from langflow.utils import migration


# revision identifiers, used by Alembic.
revision: str = '61de166f2bb4'
down_revision: Union[str, None] = '76d66c690b3f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)  # type: ignore
    table_names = inspector.get_table_names()

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('flow', schema=None) as batch_op:
        if not migration.column_exists(conn=conn, table_name='flow', column_name='actor_id'):
            batch_op.add_column(sa.Column('actor_id', sa.Uuid(), nullable=True))

            # Check if index exists before creating
            if 'flow' in table_names:
                indexes = inspector.get_indexes('flow')
                index_names = [index["name"] for index in indexes]
                if "ix_flow_actor_id" not in index_names:
                    batch_op.create_index(batch_op.f('ix_flow_actor_id'), ['actor_id'], unique=False)
            else:
                batch_op.create_index(batch_op.f('ix_flow_actor_id'), ['actor_id'], unique=False)

            batch_op.create_foreign_key('fk_flow_actor_id', 'actor', ['actor_id'], ['id'])

    with op.batch_alter_table('user', schema=None) as batch_op:
        if not migration.column_exists(conn=conn, table_name='user', column_name='actor_id'):
            batch_op.add_column(sa.Column('actor_id', sa.Uuid(), nullable=True))

            # Check if index exists before creating
            if 'user' in table_names:
                indexes = inspector.get_indexes('user')
                index_names = [index["name"] for index in indexes]
                if "ix_user_actor_id" not in index_names:
                    batch_op.create_index(batch_op.f('ix_user_actor_id'), ['actor_id'], unique=False)
            else:
                batch_op.create_index(batch_op.f('ix_user_actor_id'), ['actor_id'], unique=False)

            batch_op.create_foreign_key('fk_user_actor_id', 'actor', ['actor_id'], ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)  # type: ignore
    table_names = inspector.get_table_names()

    # ### commands auto generated by Alembic - please adjust! ###
    if 'user' in table_names:
        with op.batch_alter_table('user', schema=None) as batch_op:
            if migration.column_exists(conn=conn, table_name='user', column_name='actor_id'):
                batch_op.drop_constraint('fk_user_actor_id', type_='foreignkey')

                # Check if index exists before dropping
                indexes = inspector.get_indexes('user')
                index_names = [index["name"] for index in indexes]
                if "ix_user_actor_id" in index_names:
                    batch_op.drop_index(batch_op.f('ix_user_actor_id'))

                batch_op.drop_column('actor_id')

    if 'flow' in table_names:
        with op.batch_alter_table('flow', schema=None) as batch_op:
            if migration.column_exists(conn=conn, table_name='flow', column_name='actor_id'):
                batch_op.drop_constraint('fk_flow_actor_id', type_='foreignkey')

                # Check if index exists before dropping
                indexes = inspector.get_indexes('flow')
                index_names = [index["name"] for index in indexes]
                if "ix_flow_actor_id" in index_names:
                    batch_op.drop_index(batch_op.f('ix_flow_actor_id'))

                batch_op.drop_column('actor_id')

    # ### end Alembic commands ###
