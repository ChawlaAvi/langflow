"""add actor table

Revision ID: 76d66c690b3f
Revises: a5c648dd7ad6
Create Date: 2025-03-11 17:52:49.094607

"""
from typing import Optional, Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.engine.reflection import Inspector
from langflow.utils import migration


# revision identifiers, used by Alembic.
revision: str = '76d66c690b3f'
down_revision: Union[str, None] = 'a5c648dd7ad6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = sa.inspect(conn)  # type: ignore
    tables = inspector.get_table_names()

    # ### commands auto generated by Alembic - please adjust! ###
    if not migration.table_exists(conn=conn, name="actor"):
        op.create_table('actor',
        sa.Column('entity_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('entity_id', sa.Uuid(), nullable=False),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint('id', name='pk_actor'),
        sa.UniqueConstraint('entity_type', 'entity_id', name='unique_entity_reference')
        )
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_actor_entity_id'), ['entity_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_actor_entity_type'), ['entity_type'], unique=False)


        # Check foreign keys before modifying them
        task_foreign_keys_names = []
        if "task" in tables:
            task_foreign_keys = inspector.get_foreign_keys("task")
            task_foreign_keys_names = [fk["name"] for fk in task_foreign_keys]

        with op.batch_alter_table('task', schema=None) as batch_op:
            if "fk_task_author_id" in task_foreign_keys_names:
                batch_op.drop_constraint('fk_task_author_id', type_='foreignkey')
            if "fk_task_assignee_id" in task_foreign_keys_names:
                batch_op.drop_constraint('fk_task_assignee_id', type_='foreignkey')

            if "fk_task_author_actor_id" not in task_foreign_keys_names:
                batch_op.create_foreign_key('fk_task_author_actor_id', 'actor', ['author_id'], ['id'])
            if "fk_task_assignee_actor_id" not in task_foreign_keys_names:
                batch_op.create_foreign_key('fk_task_assignee_actor_id', 'actor', ['assignee_id'], ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    conn = op.get_bind()
    inspector = sa.inspect(conn)  # type: ignore
    tables = inspector.get_table_names()

    # ### commands auto generated by Alembic - please adjust! ###
    if migration.table_exists(conn=conn, name="actor"):
        # Check foreign keys before modifying them
        task_foreign_keys_names: list[Optional[str]] = []
        if "task" in tables:
            task_foreign_keys = inspector.get_foreign_keys("task")
            task_foreign_keys_names = [fk["name"] for fk in task_foreign_keys]

        with op.batch_alter_table('task', schema=None) as batch_op:
            if "fk_task_author_actor_id" in task_foreign_keys_names:
                batch_op.drop_constraint('fk_task_author_actor_id', type_='foreignkey')
            if "fk_task_assignee_actor_id" in task_foreign_keys_names:
                batch_op.drop_constraint('fk_task_assignee_actor_id', type_='foreignkey')

            if "fk_task_assignee_id" not in task_foreign_keys_names:
                batch_op.create_foreign_key('fk_task_assignee_id', 'flow', ['assignee_id'], ['id'])
            if "fk_task_author_id" not in task_foreign_keys_names:
                batch_op.create_foreign_key('fk_task_author_id', 'flow', ['author_id'], ['id'])


        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_actor_entity_type'))
            batch_op.drop_index(batch_op.f('ix_actor_entity_id'))

        op.drop_table('actor')
    # ### end Alembic commands ###
